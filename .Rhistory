improvement <- round(((mean(pct_correct_fergm)-mean(pct_correct_ergm))/mean(pct_correct_ergm))*100, 2)
cat(paste0("The FERGM fit reflects a ", improvement, "% improvement in tie prediction relative to the ERGM across ", replications, " simulations"))
return(correct_mat)
}
load("~/Desktop/89.RData")
load("~/Desktop/fergm.89.RData")
compare_predictions <- function(ergm.fit = NULL, fergm.fit = NULL, seed = NULL, replications = 500){
if(!is.null(seed)){
set.seed(seed)
} else {
warning("Note: This function relies upon network simulation to compare ERGM and FERGM predictions.  Consider specifying a seed to set to ensure replicability.")
}
lt <- function(m) { m[lower.tri(m)] }
n_dyads <- choose(ergm.fit$network$gal$n, 2)
nw <- ergm.fit$network
new_formula <- update.formula(ergm.fit$formula, nw ~ .)
ergm_coefs <- ergm.fit$coefs
ergm.pred <- function()
{
flo.truth <- lt(as.matrix(nw))
sim.pred <- lt(as.matrix(simulate.ergm(new_formula, ergm_coefs)))
sum(flo.truth == sim.pred) / n_dyads
}
pct_correct_ergm <- replicate(replications, ergm.pred())
stan.dta <- fergm.fit$stan.dta
stan.fit <- fergm.fit$stan.fit
truth <- stan.dta$y
predictions <- extract(stan.fit, "predictions")$predictions
pct_correct_fergm <- sapply(1:nrow(predictions),
function(r) sum(truth == predictions[r,]) / n_dyads)
correct_mat <- cbind(pct_correct_ergm, pct_correct_fergm)
improvement <- round(((mean(pct_correct_fergm)-mean(pct_correct_ergm))/mean(pct_correct_ergm))*100, 2)
cat(paste0("The FERGM fit reflects a ", improvement, "% improvement in tie prediction relative to the ERGM across ", replications, " simulations"))
return(correct_mat)
}
preds <- compare_predictions(ergm.fit = ergm.89, fergm.fit = fergm.89, replications = 10)
library(ergm)
compare_predictions <- function(ergm.fit = NULL, fergm.fit = NULL, seed = NULL, replications = 500){
if(!is.null(seed)){
set.seed(seed)
} else {
warning("Note: This function relies upon network simulation to compare ERGM and FERGM predictions.  Consider specifying a seed to set to ensure replicability.")
}
lt <- function(m) { m[lower.tri(m)] }
n_dyads <- choose(ergm.fit$network$gal$n, 2)
nw <- ergm.fit$network
new_formula <- update.formula(ergm.fit$formula, nw ~ .)
ergm_coefs <- ergm.fit$coefs
ergm.pred <- function()
{
flo.truth <- lt(as.matrix(nw))
sim.pred <- lt(as.matrix(simulate.ergm(new_formula, ergm_coefs)))
sum(flo.truth == sim.pred) / n_dyads
}
pct_correct_ergm <- replicate(replications, ergm.pred())
stan.dta <- fergm.fit$stan.dta
stan.fit <- fergm.fit$stan.fit
truth <- stan.dta$y
predictions <- extract(stan.fit, "predictions")$predictions
pct_correct_fergm <- sapply(1:nrow(predictions),
function(r) sum(truth == predictions[r,]) / n_dyads)
correct_mat <- cbind(pct_correct_ergm, pct_correct_fergm)
improvement <- round(((mean(pct_correct_fergm)-mean(pct_correct_ergm))/mean(pct_correct_ergm))*100, 2)
cat(paste0("The FERGM fit reflects a ", improvement, "% improvement in tie prediction relative to the ERGM across ", replications, " simulations"))
return(correct_mat)
}
preds <- compare_predictions(ergm.fit = ergm.89, fergm.fit = fergm.89, replications = 10)
compare_predictions <- function(ergm.fit = NULL, fergm.fit = NULL, seed = NULL, replications = 500){
if(!is.null(seed)){
set.seed(seed)
} else {
warning("Note: This function relies upon network simulation to compare ERGM and FERGM predictions.  Consider specifying a seed to set to ensure replicability.")
}
lt <- function(m) { m[lower.tri(m)] }
n_dyads <- choose(ergm.fit$network$gal$n, 2)
nw <- ergm.fit$network
new_formula <- update.formula(ergm.fit$formula, nw ~ .)
ergm_coefs <- ergm.fit$coefs
ergm.pred <- function()
{
flo.truth <- lt(as.matrix(nw))
sim.pred <- lt(as.matrix(simulate.formula(new_formula, ergm_coefs)))
sum(flo.truth == sim.pred) / n_dyads
}
pct_correct_ergm <- replicate(replications, ergm.pred())
stan.dta <- fergm.fit$stan.dta
stan.fit <- fergm.fit$stan.fit
truth <- stan.dta$y
predictions <- extract(stan.fit, "predictions")$predictions
pct_correct_fergm <- sapply(1:nrow(predictions),
function(r) sum(truth == predictions[r,]) / n_dyads)
correct_mat <- cbind(pct_correct_ergm, pct_correct_fergm)
improvement <- round(((mean(pct_correct_fergm)-mean(pct_correct_ergm))/mean(pct_correct_ergm))*100, 2)
cat(paste0("The FERGM fit reflects a ", improvement, "% improvement in tie prediction relative to the ERGM across ", replications, " simulations"))
return(correct_mat)
}
preds <- compare_predictions(ergm.fit = ergm.89, fergm.fit = fergm.89, replications = 10)
ergm.fit=ergm.89
fergm.fit=fergm.89
if(!is.null(seed)){
set.seed(seed)
} else {
warning("Note: This function relies upon network simulation to compare ERGM and FERGM predictions.  Consider specifying a seed to set to ensure replicability.")
}
lt <- function(m) { m[lower.tri(m)] }
n_dyads <- choose(ergm.fit$network$gal$n, 2)
nw <- ergm.fit$network
new_formula <- update.formula(ergm.fit$formula, nw ~ .)
ergm_coefs <- ergm.fit$coefs
ergm_coefs <- ergm.fit$coef
ergm.pred <- function()
{
flo.truth <- lt(as.matrix(nw))
sim.pred <- lt(as.matrix(simulate.formula(new_formula, ergm_coefs)))
sum(flo.truth == sim.pred) / n_dyads
}
pct_correct_ergm <- replicate(replications, ergm.pred())
replications=10
pct_correct_ergm <- replicate(replications, ergm.pred())
sim.pred <- lt(as.matrix(simulate.formula.ergm(new_formula, ergm_coefs)))
?simulate.formula
new_formula
sim.pred <- lt(as.matrix(simulate.formula(object = new_formula, coef = ergm_coefs)))
load("~/Desktop/89.RData")
load("~/Desktop/fergm.89.RData")
library(fergm)
compare_predictions <- function(ergm.fit = NULL, fergm.fit = NULL, seed = NULL, replications = 500){
if(!is.null(seed)){
set.seed(seed)
} else {
warning("Note: This function relies upon network simulation to compare ERGM and FERGM predictions.  Consider specifying a seed to set to ensure replicability.")
}
lt <- function(m) { m[lower.tri(m)] }
n_dyads <- choose(ergm.fit$network$gal$n, 2)
nw <- ergm.fit$network
new_formula <- update.formula(ergm.fit$formula, nw ~ .)
ergm_coefs <- ergm.fit$coef
ergm.pred <- function()
{
flo.truth <- lt(as.matrix(nw))
sim.pred <- lt(as.matrix(simulate.formula(object = new_formula, coef = ergm_coefs)))
sum(flo.truth == sim.pred) / n_dyads
}
pct_correct_ergm <- replicate(replications, ergm.pred())
stan.dta <- fergm.fit$stan.dta
stan.fit <- fergm.fit$stan.fit
truth <- stan.dta$y
predictions <- extract(stan.fit, "predictions")$predictions
pct_correct_fergm <- sapply(1:nrow(predictions),
function(r) sum(truth == predictions[r,]) / n_dyads)
correct_mat <- cbind(pct_correct_ergm, pct_correct_fergm)
improvement <- round(((mean(pct_correct_fergm)-mean(pct_correct_ergm))/mean(pct_correct_ergm))*100, 2)
cat(paste0("The FERGM fit reflects a ", improvement, "% improvement in tie prediction relative to the ERGM across ", replications, " simulations"))
return(correct_mat)
}
preds <- compare_predictions(ergm.fit = ergm.89, fergm.fit = fergm.89, replications = 10)
devtools::build()
devtools::build_vignettes()
rmarkdown::render(output_format = "html_document", input = your_vignette, clean = FALSE)
devtools::build_vignettes()
devtools::clean_vignettes()
devtools::build_vignettes()
rmarkdown::render("mesaHighVignette.Rmd")
rmarkdown::render("~/vignettes/mesaHighVignette.Rmd")
getwd()
rmarkdown::render("/vignettes/mesaHighVignette.Rmd")
setwd("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/vignettes")
rmarkdown::render("mesaHighVignette.Rmd")
sessionInfo()
LANG=en_US.UTF-8
option(LANG=en_US.UTF-8)
rmarkdown::render(output_format = "html_document", input = "/vignettes/mesaHighVignette.Rmd", clean = FALSE)
rmarkdown::render(output_format = "html_document", input = /vignettes/mesaHighVignette.Rmd", clean = FALSE)
rmarkdown::render(output_format = "html_document", input = "~/vignettes/mesaHighVignette.Rmd", clean = FALSE)
getwd
setwd("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/vignettes")
rmarkdown::render(output_format = "html_document", input = "mesaHighVignette.Rmd", clean = FALSE)
devtools::build()
library(fergm)
library(ergm)
preds <- compare_predictions(ergm.fit = ergm.89, fergm.fit = fergm.89, replications = 10)
rm(list=ls())
load("~/Desktop/89.RData")
load("~/Desktop/fergm.89.RData")
library(fergm)
library(ergm)
preds <- compare_predictions(ergm.fit = ergm.89, fergm.fit = fergm.89, replications = 10)
compare_predictions
sessionInfo()
devtools::load_all())
devtools::load_all()
sessionInfo()
preds <- compare_predictions(ergm.fit = ergm.89, fergm.fit = fergm.89, replications = 10)
compare_predictions
?simulate.formula
is.network(ergm.89$network)
ergm.89
ergm.89$reference
ergm.fit = ergm.89
fergm.fit = fergm.89
preds <- compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, replications = 10)
library(ergm)
preds <- compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, replications = 10)
devtools::check()
devtools::check()
devtools::build()
devtools::check()
?update.formula
data("ergm.fit")
data("fergm.fit")
data("mesa")
predict_out <- compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = net, replications = 10, seed=12345)
mesa
predict_out <- compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed=12345)
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::run_examples()
devtools::run_examples()
ergm.fit$formula
data("ergm.fit")
data("fergm.fit")
data("mesa")
predict_out <- compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed=12345)
compare_predictions <- function(ergm.fit = NULL, fergm.fit = NULL, net = NULL, seed = NULL, replications = 500){
if(!is.null(seed)){
set.seed(seed)
} else {
warning("Note: This function relies upon network simulation to compare ERGM and FERGM predictions.  Consider specifying a seed to set to ensure replicability.")
}
lt <- function(m) { m[lower.tri(m)] }
n_dyads <- choose(ergm.fit$network$gal$n, 2)
new_formula <- stats::update.formula(ergm.fit$formula, net ~ .)
ergm_coefs <- ergm.fit$coef
ergm.pred <- function()
{
flo.truth <- lt(as.matrix(ergm.fit$network))
sim.pred <- lt(as.matrix(simulate.formula(object = new_formula, coef = ergm_coefs)))
sum(flo.truth == sim.pred) / n_dyads
}
pct_correct_ergm <- replicate(replications, ergm.pred())
stan.dta <- fergm.fit$stan.dta
stan.fit <- fergm.fit$stan.fit
truth <- stan.dta$y
predictions <- extract(stan.fit, "predictions")$predictions
pct_correct_fergm <- sapply(1:nrow(predictions),
function(r) sum(truth == predictions[r,]) / n_dyads)
correct_mat <- cbind(pct_correct_ergm, pct_correct_fergm)
improvement <- round(((mean(pct_correct_fergm)-mean(pct_correct_ergm))/mean(pct_correct_ergm))*100, 2)
cat(paste0("The FERGM fit reflects a ", improvement, "% improvement in tie prediction relative to the ERGM across ", replications, " simulations"))
return(correct_mat)
}
predict_out <- compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed=12345)
library(ergm)
predict_out <- compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed=12345)
net=mesa
replications=10
lt <- function(m) { m[lower.tri(m)] }
n_dyads <- choose(ergm.fit$network$gal$n, 2)
new_formula <- stats::update.formula(ergm.fit$formula, net ~ .)
ergm_coefs <- ergm.fit$coef
ergm.pred <- function()
{
flo.truth <- lt(as.matrix(ergm.fit$network))
sim.pred <- lt(as.matrix(simulate.formula(object = new_formula, coef = ergm_coefs)))
sum(flo.truth == sim.pred) / n_dyads
}
pct_correct_ergm <- replicate(replications, ergm.pred())
library(fergm)
compare_predictions
devtools::run_examples()
devtools::check()
devtools::build()
devtools::document()
devtools::build()
devtools::run_examples()
net-mesa
net=mesa
replications=10
if(!is.null(seed)){
set.seed(seed)
} else {
warning("Note: This function relies upon network simulation to compare ERGM and FERGM predictions.  Consider specifying a seed to set to ensure replicability.")
}
lt <- function(m) { m[lower.tri(m)] }
n_dyads <- choose(ergm.fit$network$gal$n, 2)
new_formula <- stats::update.formula(ergm.fit$formula, net ~ .)
ergm_coefs <- ergm.fit$coef
ergm.pred <- function()
{
flo.truth <- lt(as.matrix(ergm.fit$network))
sim.pred <- lt(as.matrix(simulate.formula(object = new_formula, coef = ergm_coefs)))
sum(flo.truth == sim.pred) / n_dyads
}
pct_correct_ergm <- replicate(replications, ergm.pred())
devtools::run_examples()
data("ergm.fit")
data("fergm.fit")
data("mesa")
predict_out <- compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed = 12345)
compare_predictions
compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed = 12345)
mesa
data("ergm.fit")
predict_out <- compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed=12345)
devtools::build()
library(fergm)
compare_predictions
devtools::build()
devtools::install()
devtools::install()
library(fergm)
compare_predictions
devtools::run_examples()
data("ergm.fit")
data("fergm.fit")
data("mesa")
predict_out <- compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed = 12345)
ergm.fit = ergm.fit
fergm.fit = fergm.fit
net = mesa
replications = 10
seed = 12345
if(!is.null(seed)){
set.seed(seed)
} else {
warning("Note: This function relies upon network simulation to compare ERGM and FERGM predictions.  Consider specifying a seed to set to ensure replicability.")
}
lt <- function(m) { m[lower.tri(m)] }
n_dyads <- choose(ergm.fit$network$gal$n, 2)
new_formula <- stats::update.formula(ergm.fit$formula, net ~ .)
ergm_coefs <- ergm.fit$coef
ergm.pred <- function()
{
flo.truth <- lt(as.matrix(ergm.fit$network))
sim.pred <- lt(as.matrix(simulate(object = new_formula, coef = ergm_coefs)))
sum(flo.truth == sim.pred) / n_dyads
}
pct_correct_ergm <- replicate(replications, ergm.pred())
pct_correct_ergm
compare_predictions <- function(ergm.fit = NULL, fergm.fit = NULL, net = NULL, seed = NULL, replications = 500){
if(!is.null(seed)){
set.seed(seed)
} else {
warning("Note: This function relies upon network simulation to compare ERGM and FERGM predictions.  Consider specifying a seed to set to ensure replicability.")
}
lt <- function(m) { m[lower.tri(m)] }
n_dyads <- choose(ergm.fit$network$gal$n, 2)
new_formula <- stats::update.formula(ergm.fit$formula, net ~ .)
ergm_coefs <- ergm.fit$coef
ergm.pred <- function()
{
flo.truth <- lt(as.matrix(ergm.fit$network))
sim.pred <- lt(as.matrix(simulate(object = new_formula, coef = ergm_coefs)))
sum(flo.truth == sim.pred) / n_dyads
}
pct_correct_ergm <- replicate(replications, ergm.pred())
stan.dta <- fergm.fit$stan.dta
stan.fit <- fergm.fit$stan.fit
truth <- stan.dta$y
predictions <- extract(stan.fit, "predictions")$predictions
pct_correct_fergm <- sapply(1:nrow(predictions),
function(r) sum(truth == predictions[r,]) / n_dyads)
correct_mat <- cbind(pct_correct_ergm, pct_correct_fergm)
improvement <- round(((mean(pct_correct_fergm)-mean(pct_correct_ergm))/mean(pct_correct_ergm))*100, 2)
cat(paste0("The FERGM fit reflects a ", improvement, "% improvement in tie prediction relative to the ERGM across ", replications, " simulations"))
return(correct_mat)
}
compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed=12345)
compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed = 12345)
data("ergm.fit")
data("fergm.fit")
data("mesa")
compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed = 12345)
compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed = 12345)
install.packages("statnet")
install.packages("ergm")
install.packages("ergm")
install.packages("ergm")
install.packages("ergm")
devtools::install()
library(fergm)
library(ergm)
devtools::build()
devtools::install()
library(fergm)
data("ergm.fit")
data("fergm.fit")
data("mesa")
predict_out <- compare_predictions(ergm.fit = ergm.fit, fergm.fit = fergm.fit, net = mesa, replications = 10, seed = 12345)
devtools::run_examples()
devtools::check()
devtools::check()
devtools::check()
devtools::build_win(version="R-release")
devtools::build_win(version="R-dev")
devtools::release()
devtools::release()
devtools::build()
devtools::install()
devtools::check()
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/data/ergm.fit.rda")
coef(ergm.fit)
stats::coef(ergm.fit)
?ergmMPLE
?colMeans
?round
ergm.fit$coef
stats::simulate(ergm.fit)
simulate(ergm.fit)
ergm.fit
ergm.fit$network
simulate.ergm::simulate(ergm.fit)
ergm::simulate(ergm.fit)
stats::simulate(ergm.fit)
stats::simulate
ergm::simulate.ergm()
ergm::simulate.ergm(ergm.fit)
simulate(ergm.fit)
stats::simulate(ergm.fit)
library(fergm)
simulate(ergm.fit)
library(ergm)
simulate(ergm.fit)
attach(ergm)
require(ergm)
require(network)
sim.pred <- lt(as.matrix(simulate(ergm.fit)))
simulate(ergm.fit)
lt <- function(m) { m[lower.tri(m)] }
n_dyads <- choose(ergm.fit$network$gal$n, 2)
new_formula <- stats::update.formula(ergm.fit$formula, net ~ .)
ergm_coefs <- ergm.fit$coef
flo.truth <- lt(as.matrix(ergm.fit$network))
sim.pred <- lt(as.matrix(simulate(ergm.fit)))
ergm.fit$network
new_formula
ergm.fit$formula
sim.pred <- lt(as.matrix(simulate(object = ergm.fit)))
sim.pred <- lt(as.matrix(simulate(object = new_formula, coef = ergm_coefs)))
net <- ergm.fit$network
sim.pred <- lt(as.matrix(simulate(object = new_formula, coef = ergm_coefs)))
sim.pred
sim.pred <- lt(as.matrix(stats::simulate(object = new_formula, coef = ergm_coefs)))
devtools::build()
devtools::build()
devtools::build()
devtools::run_examples()
devtools::build()
devtools::install()
devtools::run_examples()
devtools::build()
devtools::install()
devtools::run_examples()
if(!is.null(seed)){
set.seed(seed)
} else {
warning("Note: This function relies upon network simulation to compare ERGM and FERGM predictions.  Consider specifying a seed to set to ensure replicability.")
}
lt <- function(m) { m[lower.tri(m)] }
n_dyads <- choose(ergm.fit$network$gal$n, 2)
new_formula <- stats::update.formula(ergm.fit$formula, net ~ .)
ergm_coefs <- ergm.fit$coef
net <- ergm.fit$network
flo.truth <- lt(as.matrix(net))
sim.pred <- lt(as.matrix(stats::simulate(object = new_formula, coef = ergm_coefs)))
sim.pred
sim.pred <- lt(as.matrix(ergm::simulate.ergm(ergm.fit)))
sim.pred <- lt(as.matrix(ergm::simulate(ergm.fit)))
sim.pred <- lt(as.matrix(stats::simulate(ergm.fit)))
sessionInfo()
sim.pred <- lt(as.matrix(stats::simulate(new_formula, ergm_coefs)))
sim.pred <- lt(as.matrix(stats::simulate(object = new_formula, coef = ergm_coefs)))
sum(flo.truth == sim.pred) / n_dyads
flo.truth <- lt(as.matrix(net))
sim.pred <- lt(as.matrix(stats::simulate(object = new_formula, coef = ergm_coefs)))
sum(flo.truth == sim.pred) / n_dyads
pct_correct_ergm <- replicate(replications, ergm.pred())
?simulate.ergm
new_formula
devtools::build()
devtools::install()
compare_predictions
compare_predictions(ergm.fit, fergm.fit, seed=123)
devtools::build()
devtools::install()
devtools::run_examples()
devtools::build()
devtools::install()
devtools::run_examples()
devtools::check()
fergm.fit$stan.fit
?`plot,stanfit-method`
plot(fergm.fit$stan.fit, par = "beta")
stan_hist(fergm.fit$stan.fit, par = "beta")
stan_dens(fergm.fit$stan.fit, par = "beta")
devtools::build()
devtools::install()
devtools::check()
sessionInfo()
devtools::build()
devtools::build()
devtools::build()
devtools::install()
devtools::check()
devtools::build()
devtools::install()
devtools::check()
devtools::build()
devtools::install()
devtools::check()

library(statnet)
library(coda)
set.seed(1)
data("faux.mesa.high")
mesa <- faux.mesa.high
ergm.fit <- ergm(mesa ~ edges +
nodematch('Sex') +
nodematch('Grade', diff = FALSE) +
nodematch('Race', diff = FALSE) +
gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE))
# FERGM fit
library(fergm)
form <- c("edges + nodematch('Sex') + nodematch('Grade', diff = FALSE) +
nodematch('Race', diff = FALSE) + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE)")
fergm.fit <- fergm(net = mesa, form = form, chains = 2)
save(ergm.fit, file = "ergm.fit.RData")
save(fergm.fit, file = "fergm.fit.RData")
save(fergm.fit, file = "fergmfit.RData")
save(ergm.fit, file = "ergmfit.RData")
stan.smry <- summary(fergm.fit$stan.fit)$summary
stan.smry <- summary(fergm.fit$stan.fit)$summary
beta_df <- stan.smry[grep("beta", rownames(stan.smry)),]
est <- round(beta_df[,c(1,4,8)], 3)
est # in order of "form"
est <- clean_summary(fergm.fit, form = form)
est <- clean_summary(fergm.fit, form = form)
est <- clean_summary(fergm.fit,
custom_var_names = c("Edges", "Sex Homophily",
"GradeHomophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
coef_plot(fergm.fit = fergm.fit,
ergm.fit = ergm.fit,
custom_var_names =  c("Edges", "Sex Homophily", "Grade Homophily",
"Race Homophily", "GWESP", "Alternating K-Stars"))
coef_plot(fergm.fit = fergm.fit,
custom_var_names =  c("Edges", "Sex Homophily", "Grade Homophily",
"Race Homophily", "GWESP", "Alternating K-Stars"))
densities <- coef_posterior_density(fergm.fit = fergm.fit,
custom_var_names = c("Edges", "Sex Homophily",
"Grade Homophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
densities[[1]]
densities[[1]]
densities[[2]]
trace <- rstan::traceplot(fergm.fit$stan.fit, pars = "beta")
trace
fergm_beta_traceplot(fergm.fit,
form = NULL,
custom_var_names =  c("Edges", "Sex Homophily",
"Grade Homophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
predict_out <- compare_predictions(ergm_fit = ergm.fit, fergm_fit = fergm.fit)
?compare_predictions
predict_out <- compare_predictions(ergm_fit = ergm.fit, fergm_fit = fergm.fit, replications = 100)
compare_predictions_plot(predict_out)
compare_predictions_test(predict_out)
devtools::build_vignettes()
devtools::use_data(ergm.fit, fergm.fit, internal=T)
devtools::document()
devtools::build()
?compare_predictions
devtools::document()
devtools::build()
devtools::run_examples()
devtools::build()
devtools::document()
devtools::build()
devtools::run_examples()
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/R/sysdata.rda")
ergm.fit$network
?simulate.ergm
data("mesa")
data("faux.mesa.high")
mesa <- faux.mesa.high
devtools::use_data(ergm.fit, fergm.fit, mesa, internal = TRUE)
devtools::use_data(ergm.fit, fergm.fit, mesa, internal = TRUE, overright=TRUE)
devtools::use_data(ergm.fit, fergm.fit, mesa, internal = TRUE, overwrite=TRUE)
devtools::build()
devtools::run_examples()
devtools::document()
devtools::build()
devtools::run_examples()
devtools::check()
tools::checkRdaFiles()
document::build()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
library(fergm)
ferm.fit
data("fergm.fit")
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/R/sysdata.rda")
setwd("~/Dropbox/Projects/Projects_Skyler/TNAM_TC/TNAM_pilot_data/clusteringPaper")
############################
#
# TC -- Descriptive Statistics
# B. W. Campbell
# Last Updated:  08/07/2017
#
############################
############
# Top Matter
############
setwd("~/Dropbox/Projects/Projects_Skyler/TNAM_TC/TNAM_pilot_data/clusteringPaper")
rm(list = ls())
options(stringsAsFactors = FALSE)
load("GraduationResults.RData")
dat <- Affirmations_8$model
dat[dat$covariate.Days < 0,]$covariate.Days <- NA
rm(list=setdiff(ls(), "dat"))
################
# Densities of
# variables
################
source("describe.R")
outcome <- describe(dat$response, type = "binary", plot_title = "TC Graduation")
net1 <- describe(dat$netlag.pathdist1, type = "continuous", plot_title = "Direct Affirmations")
net2 <- describe(dat$netlag.pathdist2.decay0.5, type = "continuous", plot_title = "Indirect Affirmations")
indegree <- describe(dat$indegree, type = "continuous", plot_title = "In-Degree Centrality")
reciprocity <- describe(dat$`covariate.Reciprocity Rate`, type = "continuous", plot_title = "Reciprocity Rate")
days <- describe(dat$covariate.Days, type = "continuous", plot_title = "Days")
age <- describe(dat$covariate.Age, type = "continuous", plot_title = "Age")
black <- describe(dat$covariate.Black, type = "binary", plot_title = "Black")
lsi <- describe(dat$`covariate.LSI Entry`, type = "continuous", plot_title = "Entry LSI")
# Multiplot
source("multiplot.R")
pdf("DescriptionMultiplot.png")
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, cols=3)
dev.off()
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, cols=3)
# Descriptions
dist <- list(outcome = outcome$dist, direct = net1$dist, indirect = net2$dist,
indegree = indegree$dist, reciprocity = reciprocity$dist, days= days$dist,
age = age$dist, black = black$dist, lsi = lsi$dist)
sink("DescriptionOutput.txt")
dist
sink()
sd(dat$netlag.pathdist1)
sd(dat$netlag.pathdist2.decay0.5)
png("DescriptionMultiplot.png")
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, cols=3)
dev.off()
# Descriptions
dist <- list(outcome = outcome$dist, direct = net1$dist, indirect = net2$dist,
indegree = indegree$dist, reciprocity = reciprocity$dist, days= days$dist,
age = age$dist, black = black$dist, lsi = lsi$dist)
sink("DescriptionOutput.txt")
dist
sink()
?png
png("DescriptionMultiplot.png", width = 700, height = 700)
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, cols=3)
dev.off()
mean(dat$netlag.pathdist1)
mean(dat$netlag.pathdist2.decay0.5)
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/.RData")
devtools::build()
devtools::run_examples()
devtools::build()
devtools::document()
devtools::check()
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/R/sysdata.rda")
mesa
ergm.fit
fergm.fit
devtools::use_data(ergm.fit, fergm.fit, mesa, internal = TRUE, overwrite = TRUE)
install.packages("tools")
install.packages("tools")
install.packages("tools")
install.packages("tools")
tools::checkRdaFiles("/R")
getwd
getwd()
tools::checkRdaFiles("/Users/benjamincampbell/Dropbox/int group environment cases/FERGM replication/data and code/fergm/R")
resaveRdaFiles("/Users/benjamincampbell/Dropbox/int group environment cases/FERGM replication/data and code/fergm/R", compress = c("auto", "gzip", "bzip2", "xz"),
compression_level)
tools::resaveRdaFiles("/Users/benjamincampbell/Dropbox/int group environment cases/FERGM replication/data and code/fergm/R", compress = c("auto", "gzip", "bzip2", "xz"),
compression_level)
devtools::check()
?testthat
??testthat
devtools::use_testthat()
library(testthat)
library(fergm)
test_check("fergm")
tools::checkRdaFiles()
tools::checkRdaFiles("~/R")
setwd("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/R")
tools::checkRdaFiles("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/R")
??resaveRdaFiles
tools::resaveRdaFiles("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/R", compress = "xz")
devtools::check()
############################
#
# TC -- Descriptive Statistics
# B. W. Campbell
# Last Updated:  08/07/2017
#
############################
############
# Top Matter
############
setwd("~/Dropbox/Projects/Projects_Skyler/TNAM_TC/TNAM_pilot_data/clusteringPaper")
rm(list = ls())
options(stringsAsFactors = FALSE)
load("GraduationResults.RData")
dat <- Affirmations_8$model
dat[dat$covariate.Days < 0,]$covariate.Days <- NA
rm(list=setdiff(ls(), "dat"))
################
# Densities of
# variables
################
source("describe.R")
outcome <- describe(dat$response, type = "binary", plot_title = "TC Graduation")
net1 <- describe(dat$netlag.pathdist1, type = "continuous", plot_title = "Direct Affirmations")
net2 <- describe(dat$netlag.pathdist2.decay0.5, type = "continuous", plot_title = "Indirect Affirmations")
indegree <- describe(dat$indegree, type = "continuous", plot_title = "In-Degree Centrality")
reciprocity <- describe(dat$`covariate.Reciprocity Rate`, type = "continuous", plot_title = "Reciprocity Rate")
days <- describe(dat$covariate.Days, type = "continuous", plot_title = "Days")
age <- describe(dat$covariate.Age, type = "continuous", plot_title = "Age")
black <- describe(dat$covariate.Black, type = "binary", plot_title = "Race")
lsi <- describe(dat$`covariate.LSI Entry`, type = "continuous", plot_title = "Entry LSI")
# Multiplot
source("multiplot.R")
png("DescriptionMultiplot.png", width = 700, height = 700)
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, cols=3)
dev.off()
# Descriptions
dist <- list(outcome = outcome$dist, direct = net1$dist, indirect = net2$dist,
indegree = indegree$dist, reciprocity = reciprocity$dist, days= days$dist,
age = age$dist, black = black$dist, lsi = lsi$dist)
sink("DescriptionOutput.txt")
dist
sink()
vars <- list(dat$response, dat$netlag.pathdist1, dat$netlag.pathdist2.decay0.5, dat$indegree, dat$`covariate.Reciprocity Rate`,
dat$covariate.Days, dat$covariate.Age, dat$covariate.Black, dat$`covariate.LSI Entry`)
vars <- list(dat$response, dat$netlag.pathdist1, dat$netlag.pathdist2.decay0.5, dat$indegree, dat$`covariate.Reciprocity Rate`,
dat$covariate.Days, dat$covariate.Age, dat$covariate.Black, dat$`covariate.LSI Entry`)
# Multiplot
source("multiplot.R")
png("DescriptionMultiplot.png", width = 700, height = 700)
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, cols=3)
dev.off()
# Descriptions
dist <- list(outcome = outcome$dist, direct = net1$dist, indirect = net2$dist,
indegree = indegree$dist, reciprocity = reciprocity$dist, days= days$dist,
age = age$dist, black = black$dist, lsi = lsi$dist)
sink("DescriptionOutput.txt")
dist
sink()
dist
dat <- Affirmations_9$model
setwd("~/Dropbox/Projects/Projects_Skyler/TNAM_TC/TNAM_pilot_data/clusteringPaper")
rm(list = ls())
options(stringsAsFactors = FALSE)
load("GraduationResults.RData")
dat <- Affirmations_8$model
dat[dat$covariate.Days < 0,]$covariate.Days <- NA
rm(list=setdiff(ls(), "dat"))
################
# Densities of
# variables
################
source("describe.R")
outcome <- describe(dat$response, type = "binary", plot_title = "TC Graduation")
net1 <- describe(dat$netlag.pathdist1, type = "continuous", plot_title = "Direct Affirmations")
net2 <- describe(dat$netlag.pathdist2.decay0.5, type = "continuous", plot_title = "Indirect Affirmations")
indegree <- describe(dat$indegree, type = "continuous", plot_title = "In-Degree Centrality")
reciprocity <- describe(dat$`covariate.Reciprocity Rate`, type = "continuous", plot_title = "Reciprocity Rate")
days <- describe(dat$covariate.Days, type = "continuous", plot_title = "Days")
age <- describe(dat$covariate.Age, type = "continuous", plot_title = "Age")
black <- describe(dat$covariate.Black, type = "binary", plot_title = "Race")
lsi <- describe(dat$`covariate.LSI Entry`, type = "continuous", plot_title = "Entry LSI")
vars <- list(dat$response, dat$netlag.pathdist1, dat$netlag.pathdist2.decay0.5, dat$indegree, dat$`covariate.Reciprocity Rate`,
dat$covariate.Days, dat$covariate.Age, dat$covariate.Black, dat$`covariate.LSI Entry`)
# Multiplot
source("multiplot.R")
png("DescriptionMultiplot.png", width = 700, height = 700)
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, cols=3)
dev.off()
# Descriptions
dist <- list(outcome = outcome$dist, direct = net1$dist, indirect = net2$dist,
indegree = indegree$dist, reciprocity = reciprocity$dist, days= days$dist,
age = age$dist, black = black$dist, lsi = lsi$dist)
sink("DescriptionOutput.txt")
dist
sink()
dat <- Affirmations_9$model
load("GraduationResults.RData")
dat <- Affirmations_8$model
dat[dat$covariate.Days < 0,]$covariate.Days <- NA
rm(list=setdiff(ls(), "dat"))
dat <- Affirmations_9$model
dat[dat$covariate.Days < 0,]$covariate.Days <- NA
rm(list=setdiff(ls(), "dat"))
load("GraduationResults.RData")
dat <- Affirmations_9$model
dat[dat$covariate.Days < 0,]$covariate.Days <- NA
rm(list=setdiff(ls(), "dat"))
sd(dat$weightlag)
mean(dat$weightlag)
############################
#
# TC -- Descriptive Statistics
# B. W. Campbell
# Last Updated:  08/07/2017
#
############################
############
# Top Matter
############
setwd("~/Dropbox/Projects/Projects_Skyler/TNAM_TC/TNAM_pilot_data/clusteringPaper")
rm(list = ls())
options(stringsAsFactors = FALSE)
load("GraduationResults.RData")
dat <- Affirmations_8$model
dat[dat$covariate.Days < 0,]$covariate.Days <- NA
rm(list=setdiff(ls(), "dat"))
################
# Densities of
# variables
################
source("describe.R")
outcome <- describe(dat$response, type = "binary", plot_title = "TC Graduation")
net1 <- describe(dat$netlag.pathdist1, type = "continuous", plot_title = "Direct Affirmations")
net2 <- describe(dat$netlag.pathdist2.decay0.5, type = "continuous", plot_title = "Indirect Affirmations")
indegree <- describe(dat$indegree, type = "continuous", plot_title = "In-Degree Centrality")
reciprocity <- describe(dat$`covariate.Reciprocity Rate`, type = "continuous", plot_title = "Reciprocity Rate")
days <- describe(dat$covariate.Days, type = "continuous", plot_title = "Days")
age <- describe(dat$covariate.Age, type = "continuous", plot_title = "Age")
black <- describe(dat$covariate.Black, type = "binary", plot_title = "Race")
lsi <- describe(dat$`covariate.LSI Entry`, type = "continuous", plot_title = "Entry LSI")
vars <- list(dat$response, dat$netlag.pathdist1, dat$netlag.pathdist2.decay0.5, dat$indegree, dat$`covariate.Reciprocity Rate`,
dat$covariate.Days, dat$covariate.Age, dat$covariate.Black, dat$`covariate.LSI Entry`)
# Multiplot
source("multiplot.R")
png("DescriptionMultiplot.png", width = 700, height = 700)
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, cols=3)
dev.off()
# Descriptions
dist <- list(outcome = outcome$dist, direct = net1$dist, indirect = net2$dist,
indegree = indegree$dist, reciprocity = reciprocity$dist, days= days$dist,
age = age$dist, black = black$dist, lsi = lsi$dist)
sink("DescriptionOutput.txt")
dist
sink()
load("GraduationResults.RData")
dat <- Affirmations_9$model
dat[dat$covariate.Days < 0,]$covariate.Days <- NA
weight <- describe(dat$weightlag, type = "continuous", plot_title = "Weighted Affirmations")
mean(dat$weightlag)
sd(dat$weightlag)
dist <- list(outcome = outcome$dist, direct = net1$dist, indirect = net2$dist,
indegree = indegree$dist, reciprocity = reciprocity$dist, days= days$dist,
age = age$dist, black = black$dist, lsi = lsi$dist, weight = weight$dist)
sink("DescriptionOutput.txt")
dist
sink()
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, weight$dist, cols=2)
png("DescriptionMultiplot.png", width = 700, height = 700)
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, weight$dist, cols=2)
dev.off()
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, weight$dist, cols=2)
sink("DescriptionOutput.txt")
dist
sink()
png("DescriptionMultiplot.png", width = 700, height = 700)
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, weight$summary_plot, cols=2)
dev.off()
lapply(vars, mean)
lapply(vars, mean(na.rm=T))
lapply(vars, function(x) mean(x, na.rm=T))
vars
lapply(vars, function(x) mean(x, na.rm=T))
lapply(vars, function(x) sd(x, na.rm=T))
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/R/sysdata.rda")
save(ergm.fit, fergm.fit, mesa, file = "Examples.RData")
devtools::use_data(ergm.fit, fergm.fit. mesa)
devtools::use_data(ergm.fit, fergm.fit, mesa)
save(ergm.fit, fergm.fit, mesa, file = "Examples.RData")
ergm.fit$formula
?mesa
??mesa
devtools::build()
data("fergm.fit")
data(fergm.fit)
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/data/Examples.RData")
?devtools::use_data
save(ergm.fit, file = "ergm.fit.RData")
save(fergm.fit, file = "fergm.fit.RData")
save(mesa, file = "mesa.RData")
devtools::build()
devtools::document()
devtools::run_examples()
data("ergm.fit")
data("ergm.fit")
devtools::document()
devtools::build()
devtools::run_examples()
devtools::build()
devtools::document()
devtools::run_examples()
devtools::check()
tools::resaveRdaFiles("~/data")
devtools::use_data(ergm.fit, fergm.fit, mesa)
devtools::build()
devtools::run_examples()
devtools::check()
devtools::build()
devtools::build_win()
??devtools::build_win
devtools::build_win("R-release")
devtools::build_win(version = "R-release")
devtools::document()
devtools::document()
devtools::build_win(version = "R-release")
devtools::build_win()
devtools::build()
devtools::run_examples()
devtools::document()
devtools::check()
devtools::build_win()
devtools::build_win(version = "R-release")
devtools::document()
?compare_predictions
devtools::document()
?compare_predictions
devtools::document()
?compare_predictions
?compare_predictions_test
devtools::document()
devtools::release()
devtools::release()
library(statnet)
library(coda)
set.seed(1)
data("faux.mesa.high")
mesa <- faux.mesa.high
library(fergm)
form <- c("edges + nodematch('Sex') + nodematch('Grade', diff = FALSE) +
nodematch('Race', diff = FALSE) + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE)")
fergm.fit <- fergm(net = mesa, form = form, chains = 1)
stan.smry <- summary(fergm.fit$stan.fit)$summary
beta_df <- stan.smry[grep("beta", rownames(stan.smry)),]
est <- round(beta_df[,c(1,4,8)], 3)
est # in order of "form"
est <- clean_summary(fergm.fit, form = form)
est <- clean_summary(fergm.fit, form = form)
est <- clean_summary(fergm.fit,
custom_var_names = c("Edges", "Sex Homophily",
"GradeHomophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
coef_plot(fergm.fit = fergm.fit,
ergm.fit = ergm.fit,
custom_var_names =  c("Edges", "Sex Homophily", "Grade Homophily",
"Race Homophily", "GWESP", "Alternating K-Stars"))
densities <- coef_posterior_density(fergm.fit = fergm.fit,
custom_var_names = c("Edges", "Sex Homophily",
"Grade Homophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
densities[[1]]
trace <- rstan::traceplot(fergm.fit$stan.fit, pars = "beta")
trace
fergm_beta_traceplot(fergm.fit,
form = NULL,
custom_var_names =  c("Edges", "Sex Homophily",
"Grade Homophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
predict_out <- compare_predictions(ergm_fit = ergm.fit, fergm_fit = fergm.fit, replications = 100)
devtools::use_data(fergm.fit, overwrite=T)
devtools::build_vignettes()
devtools::document()
devtools::build()
devtools::run_examples()
devtools::check()
devtools::release()
devtools::release()
devtools::release()
devtools::document()
devtools::build()
devtools::release()
devtools::release()
devtools::release()

#' est <- clean_summary(fergm.fit,
#' custom_var_names = c("Edges", "Sex Homophily", "Grade Homophily",
#' "Race Homophily", "GWESP", "Alternating K-Stars"))
#' @export
clean_summary <- function(fergm.fit = NULL, custom_var_names = NULL){
its <- rstan::extract(fergm.fit$stan.fit)$beta
form <- fergm.fit$form
fergm_df <- cbind(as.data.frame(colMeans(its)), as.data.frame(matrixStats::colQuantiles(its, probs = c(0.025, 0.975))))
colnames(fergm_df)[1] <- "mean"
if(!is.null(custom_var_names)){
rownames(fergm_df) <- custom_var_names
} else {
rownames(fergm_df) <- stringr::str_replace_all(string = unlist(strsplit(form, "[+]")), pattern=" ", repl="")
}
return(fergm_df)
}
clean_summary(fergm.fit)
est <- clean_summary(fergm.fit, form = form)
est <- clean_summary(fergm.fit,
custom_var_names = c("Edges", "Sex Homophily",
"GradeHomophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
est <- clean_summary(fergm.fit,
custom_var_names = c("Edges", "Sex Homophily",
"GradeHomophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
coef_plot(fergm.fit = fergm.fit,
ergm.fit = ergm.fit,
custom_var_names =  c("Edges", "Sex Homophily", "Grade Homophily",
"Race Homophily", "GWESP", "Alternating K-Stars"))
coef_plot(fergm.fit = fergm.fit)
coef_plot(fergm.fit = fergm.fit,
custom_var_names =  c("Edges", "Sex Homophily", "Grade Homophily",
"Race Homophily", "GWESP", "Alternating K-Stars"))
coef_plot(fergm.fit = fergm.fit,
ergm.fit = ergm.fit,
custom_var_names =  c("Edges", "Sex Homophily", "Grade Homophily",
"Race Homophily", "GWESP", "Alternating K-Stars"))
custom_var_names <- fergm.fit$form
stringr::str_replace_all(string = unlist(strsplit(custom_var_names, "[+]")), pattern=" ", repl="")
#' Plots the coefficients of FERGM and potentially ERGM objects.
#'
#' This function allows the users to compare the coefficients of ERGMs and FERGMs
#' @param fergm.fit Output object from the fergm function.
#' @param ergm.fit An ergm object containing the same model terms as the fergm object in the same formula order
#' @param custom_var_names Custom variable names to use that match the order of the form object passed to FERGM.  If not provided, defaults to names inhereted by fergm.fit.
#' @return This prints a coefficient "rope ladder" plot
#' @keywords FERGM interpret summary
#' @references Box-Steffensmeier, Janet M., Dino P. Christenson, and Jason W. Morgan. 2017. ``Modeling Unobserved Heterogeneity in Social Networks with the Frailty Exponential Random Graph Model." \emph{Political Analysis}.
#' @references Stan Development Team (2016). RStan: the R interface to Stan. R package version 2.14.1. \url{http://mc-stan.org/}.
#' @examples
#' # load example data
#' data("ergm.fit")
#' data("fergm.fit")
#' data("mesa")
#' # Compare substantive implications via coef plot, these are with 95% credible intervals
#' coef_plot(fergm.fit = fergm.fit, ergm.fit = ergm.fit,
#' custom_var_names =  c("Edges", "Sex Homophily", "Grade Homophily",
#' "Race Homophily", "GWESP", "Alternating K-Stars"))
#' coef_plot(fergm.fit = fergm.fit,
#' custom_var_names =  c("Edges", "Sex Homophily", "Grade Homophily",
#' "Race Homophily", "GWESP", "Alternating K-Stars"))
#' @export
coef_plot <- function(fergm.fit = NULL, ergm.fit = NULL, custom_var_names = NULL){
its <- rstan::extract(fergm.fit$stan.fit)$beta
if(is.null(custom_var_names)){
custom_var_names <- fergm.fit$form
custom_var_names <- stringr::str_replace_all(string = unlist(strsplit(custom_var_names, "[+]")), pattern=" ", repl="")
}
fergm_df <- cbind(as.data.frame(colMeans(its)), as.data.frame(matrixStats::colQuantiles(its, probs = c(0.025, 0.975))))
colnames(fergm_df)[1] <- "mean"
if(!is.null(ergm.fit)){
est <- cbind(round(cbind(ergm::coef.ergm(ergm.fit),
stats::confint(ergm.fit)), 3),
round(fergm_df, 3))
colnames(est) <- c("ergm", "ergm.low", "ergm.high", "fergm", "fergm.low",
"fergm.high")
est$var <- custom_var_names
coef_df <- data.frame()
for(i in 1:length(custom_var_names)){
temp <- data.frame(
var = rbind(paste0("ERGM: ", custom_var_names[i]), paste0("FERGM: ", custom_var_names[i])),
coef = rbind(est$ergm[i], est$fergm[i]),
low = rbind(est$ergm.low[i], est$fergm.low[i]),
high = rbind(est$ergm.high[i], est$fergm.high[i]))
coef_df <- rbind(coef_df, temp)
}
coef_df$var <- factor(coef_df$var, levels = unique(coef_df$var))
p = ggplot(coef_df, aes(x=coef_df$var)) +
geom_pointrange(aes(y = coef_df$coef, ymin = coef_df$low, ymax = coef_df$high), colour=ifelse(coef_df$low < 0 & coef_df$high > 0, "firebrick4", "dodgerblue4")) +
theme_bw()  +
coord_flip() +
geom_hline(yintercept = 0, lty=2) +
xlab('Variable') +
ylab('Coefficient') +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
} else {
est <- round(fergm_df, 3)
colnames(est) <- c("fergm", "fergm.low",
"fergm.high")
est$var <- custom_var_names
coef_df <- data.frame()
for(i in 1:length(custom_var_names)){
temp <- data.frame(
var = rbind(paste0("FERGM: ", custom_var_names[i])),
coef = rbind(est$fergm[i]),
low = rbind(est$fergm.low[i]),
high = rbind(est$fergm.high[i]))
coef_df <- rbind(coef_df, temp)
}
coef_df$var <- factor(coef_df$var, levels = unique(coef_df$var))
p = ggplot(coef_df, aes(x=coef_df$var)) +
geom_pointrange(aes(y = coef_df$coef, ymin = coef_df$low, ymax = coef_df$high), colour=ifelse(coef_df$low < 0 & coef_df$high > 0, "firebrick4", "dodgerblue4")) +
theme_bw()  +
coord_flip() +
geom_hline(yintercept = 0, lty=2) +
xlab('Variable') +
ylab('Coefficient') +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
}
return(p)
}
coef_plot(fergm.fit = fergm.fit)
#' Plots the posterior density for the fergm model terms
#'
#' This function allows the users to examine the posterior density of FERGM model terms.
#' @param fergm.fit Output object from the fergm function.
#' @param custom_var_names  Custom variable names to use that match the order of the form object passed to FERGM.  If not provided, defaults to names inhereted by fergm.fit.
#' @return This prints a list of posterior density plots.
#' @references Box-Steffensmeier, Janet M., Dino P. Christenson, and Jason W. Morgan. 2017. ``Modeling Unobserved Heterogeneity in Social Networks with the Frailty Exponential Random Graph Model." \emph{Political Analysis}.
#' @references Stan Development Team (2016). RStan: the R interface to Stan. R package version 2.14.1. \url{http://mc-stan.org/}.
#' @keywords FERGM interpret summary
#' @examples
#' # load example data
#' data("ergm.fit")
#' data("fergm.fit")
#' data("mesa")
#'
#' # You can also look at the density of particular variables
#'   # using the following built in rstan functions:
#' plot(fergm.fit$stan.fit, par = "beta")
#' # Histogram of the posterior
#' stan_hist(fergm.fit$stan.fit, par = "beta")
#' # Density of the posteriors
#' stan_dens(fergm.fit$stan.fit, par = "beta")
#'
#' # We have a cleaner function to look at the posterior densities
#' densities <- coef_posterior_density(fergm.fit = fergm.fit,
#' custom_var_names = c("Edges", "Sex Homophily", "Grade Homophily", "Race Homophily",
#' "GWESP", "Alternating K-Stars"))
#' densities[[1]]
#' densities[[2]]
#' @export
coef_posterior_density <- function(fergm.fit = NULL, custom_var_names = NULL){
its <- rstan::extract(fergm.fit$stan.fit)$beta
if(is.null(custom_var_names)){
custom_var_names <- fergm.fit$form
custom_var_names <- stringr::str_replace_all(string = unlist(strsplit(custom_var_names, "[+]")), pattern=" ", repl="")
}
plot_list <- list()
for(i in 1:ncol(its))
local({
i <- i
ts <- its[,i]
plot_df <- data.frame(values = ts)
plot_df <- reshape2::melt(plot_df)
var <- custom_var_names[i]
pl <- ggplot(data = plot_df, aes(x = plot_df$value)) +
geom_density(alpha = 0.5, fill = "firebrick4", color = "firebrick4") +
xlab("Effect Value") +
ylab("Density") +
ggtitle(var) +
#cale_fill_manual(values=c("firebrick4", "dodgerblue4"),
#name="Model",
# breaks=c("pct_correct_ergm", "pct_correct_fergm"),
#labels=c("ERGM", "FERGM")) +
# scale_color_manual(values=c("firebrick4", "dodgerblue4"),
# name="Model",
# breaks=c("pct_correct_ergm", "pct_correct_fergm"),
# labels=c("ERGM", "FERGM")) +
#  geom_vline(xintercept=0) +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
plot_list[[i]] <<- pl
})
return(plot_list)
}
densities <- coef_posterior_density(fergm.fit = fergm.fit)
densities[[1]]
densities[[2]]
#' Plot traceplots for model terms.
#'
#' This function takes a fergm object and plots the time series of each chain per model term.
#' @param fergm.fit Output object from the fergm function.
#' @param custom_var_names If custom variable names are to be used, specify a vector of characters equal to the number of terms used.
#' @param form The right hand side formula specified for the FERGM function, custom.var.names takes precedent.
#' @return This prints a traceplot for the effects of interest
#' @keywords FERGM interpret summary
#' @references Box-Steffensmeier, Janet M., Dino P. Christenson, and Jason W. Morgan. 2017. ``Modeling Unobserved Heterogeneity in Social Networks with the Frailty Exponential Random Graph Model." \emph{Political Analysis}.
#' @references Stan Development Team (2016). RStan: the R interface to Stan. R package version 2.14.1. \url{http://mc-stan.org/}.
#' @examples
#' # load example data
#' data("ergm.fit")
#' data("fergm.fit")
#' data("mesa")
#' # Use rstan's built in traceplot function
#' trace <- rstan::traceplot(fergm.fit$stan.fit, pars = "beta")
#' trace
#'
#' # We have our own version that includes variable names and tidies it up a bit
#' fergm_beta_traceplot(fergm.fit,
#'                     form = NULL,
#'                     custom_var_names =  c("Edges", "Sex Homophily",
#'                     "Grade Homophily", "Race Homophily", "GWESP", "Alternating K-Stars"))
#
#' @export
fergm_beta_traceplot <- function(fergm.fit = NULL, custom_var_names = NULL){
trace <- rstan::traceplot(fergm.fit$stan.fit, pars = "beta")
if(is.null(custom_var_names)){
custom_var_names <- fergm.fit$form
custom_var_names <- stringr::str_replace_all(string = unlist(strsplit(custom_var_names, "[+]")), pattern=" ", repl="")
}
var_names <- unlist(strsplit(form, "[+]"))
var_names<- stringr::str_replace_all(string=var_names, pattern=" ", repl="")
levels(trace$data$parameter) <- var_names
trace$labels$colour <- "Chain"
trace$labels$x <- "Iteration"
trace$labels$y <- "Value"
return(trace)
}
fergm_beta_traceplot(fergm.fit)
fergm_beta_traceplot(fergm.fit,
custom_var_names =  c("Edges", "Sex Homophily",
"Grade Homophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
#' Plot traceplots for model terms.
#'
#' This function takes a fergm object and plots the time series of each chain per model term.
#' @param fergm.fit Output object from the fergm function.
#' @param custom_var_names If custom variable names are to be used, specify a vector of characters equal to the number of terms used.
#' @param form The right hand side formula specified for the FERGM function, custom.var.names takes precedent.
#' @return This prints a traceplot for the effects of interest
#' @keywords FERGM interpret summary
#' @references Box-Steffensmeier, Janet M., Dino P. Christenson, and Jason W. Morgan. 2017. ``Modeling Unobserved Heterogeneity in Social Networks with the Frailty Exponential Random Graph Model." \emph{Political Analysis}.
#' @references Stan Development Team (2016). RStan: the R interface to Stan. R package version 2.14.1. \url{http://mc-stan.org/}.
#' @examples
#' # load example data
#' data("ergm.fit")
#' data("fergm.fit")
#' data("mesa")
#' # Use rstan's built in traceplot function
#' trace <- rstan::traceplot(fergm.fit$stan.fit, pars = "beta")
#' trace
#'
#' # We have our own version that includes variable names and tidies it up a bit
#' fergm_beta_traceplot(fergm.fit,
#'                     form = NULL,
#'                     custom_var_names =  c("Edges", "Sex Homophily",
#'                     "Grade Homophily", "Race Homophily", "GWESP", "Alternating K-Stars"))
#
#' @export
fergm_beta_traceplot <- function(fergm.fit = NULL, custom_var_names = NULL){
trace <- rstan::traceplot(fergm.fit$stan.fit, pars = "beta")
if(is.null(custom_var_names)){
custom_var_names <- fergm.fit$form
custom_var_names <- stringr::str_replace_all(string = unlist(strsplit(custom_var_names, "[+]")), pattern=" ", repl="")
}
var_names <- custom_var_names
levels(trace$data$parameter) <- var_names
trace$labels$colour <- "Chain"
trace$labels$x <- "Iteration"
trace$labels$y <- "Value"
return(trace)
}
fergm_beta_traceplot(fergm.fit)
fergm_beta_traceplot(fergm.fit,
custom_var_names =  c("Edges", "Sex Homophily",
"Grade Homophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
devtols::build()
devtools::build()
devtools::document()
devtools::build_vignettes()
?clean_summary
devtools::document()
?clean_summary
?summary
?texreg::coefplot
?coef_plot
?coef_plot
devtools::use_data(fergm.fit)
devtools::use_data(fergm.fit, overwrite = TRUE)
?coef_plot
?ks.test
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build_win(version = "R-release")
devtools::build_win(version = "R-dev")
?fergm
devtools::check()
devtools::release()
devtools::release()
devtools::check()
devtools::release()
devtools::check()
devtools::release()
install.packages("dlstats")
x <- cran_stats(c("fergm"))
library("ggplot2")
library("dlstats")
x <- cran_stats(c("fergm"))
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
x
x <- cran_stats(c("fergm", "xergm"))
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
library("ggplot2")
library("dlstats")
x <- cran_stats(c("fergm"))
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
?cran_stats
library("ggplot2")
library("dlstats")
x <- cran_stats(c("fergm"))
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
x
setwd("~/Dropbox/int group environment cases/FERGM replication/data and code/monteCarlo_Nested")
load("~/Dropbox/int group environment cases/FERGM replication/data and code/monteCarlo_Nested/NestedMonteCarloReduced_10Iterations_09112017.RData")
library(statnet)
#devtools::install_github("benjamin-w-campbell/fergm")
library(fergm)
predict_df <- data.frame()
for(i in 1:length(out)){
predict_out <- compare_predictions(ergm_fit = ergm_fits[[i]], fergm_fit = fergm_fits[[i]])
test_out <- compare_predictions_test(predict_out)
sig <- ifelse(test_out$p.value < 0.05, TRUE, FALSE)
ergm_mean <- mean(predict_out[,1], na.rm = TRUE)
fergm_mean <- mean(predict_out[,2], na.rm = TRUE)
netsize <- ifelse(i <= 10, 100,
ifelse(i > 10 & i <=21, 125, 150))
predict_df <- rbind(predict_df, c(sig, ergm_mean, fergm_mean, netsize))
colnames(predict_df) <- c("sig", "ergm_mean", "fergm_mean", "netsize")
print(i)
}
ergm_fit = ergm_fits[[i]]
ergm_fit
predict_out <- compare_predictions(ergm.fit = ergm_fits[[i]], fergm.fit = fergm_fits[[i]])
predict_df <- data.frame()
for(i in 1:length(out)){
predict_out <- compare_predictions(ergm.fit = ergm_fits[[i]], fergm.fit = fergm_fits[[i]])
test_out <- compare_predictions_test(predict_out)
sig <- ifelse(test_out$p.value < 0.05, TRUE, FALSE)
ergm_mean <- mean(predict_out[,1], na.rm = TRUE)
fergm_mean <- mean(predict_out[,2], na.rm = TRUE)
netsize <- ifelse(i <= 10, 100,
ifelse(i > 10 & i <=21, 125, 150))
predict_df <- rbind(predict_df, c(sig, ergm_mean, fergm_mean, netsize))
colnames(predict_df) <- c("sig", "ergm_mean", "fergm_mean", "netsize")
print(i)
}
save(predict_df, file = "Compare10Iterations.RData")
save(predict_df, file = "Compare10Iterations_Reduced.RData")
table(predict_df$sig)
rm(list=setdiff(ls(), "predict_df"))
reduced_df <- predict_df
load("~/Dropbox/int group environment cases/FERGM replication/data and code/monteCarlo_Nested/NestedMonteCarlFull_10Iterations_09222017.RData")
load("~/Dropbox/int group environment cases/FERGM replication/data and code/monteCarlo_Nested/NestedMonteCarloFull_10Iterations_09222017.RData")
gc()
predict_df <- data.frame()
for(i in 1:length(out)){
predict_out <- compare_predictions(ergm.fit = ergm_fits[[i]], fergm.fit = fergm_fits[[i]])
test_out <- compare_predictions_test(predict_out)
sig <- ifelse(test_out$p.value < 0.05, TRUE, FALSE)
ergm_mean <- mean(predict_out[,1], na.rm = TRUE)
fergm_mean <- mean(predict_out[,2], na.rm = TRUE)
netsize <- ifelse(i <= 10, 100,
ifelse(i > 10 & i <=21, 125, 150))
predict_df <- rbind(predict_df, c(sig, ergm_mean, fergm_mean, netsize))
colnames(predict_df) <- c("sig", "ergm_mean", "fergm_mean", "netsize")
print(i)
}
save(predict_df, file = "Compare10Iterations_Full.RData")
sink("nestedMonteCarloResults_10It.txt")
cat("Reduced Model -- Number of cases with significantly better FERGM fit")
table(reduced_df$sig)
cat("Full Model -- Number of cases with significantly better FERGM fit")
table(predict_df$sig)
sink()
save(predict_df, file = "Compare10Iterations_Full.RData")
sink("nestedMonteCarloResults_10It.txt")
cat("Reduced Model -- Number of cases with significantly better FERGM fit:")
table(reduced_df$sig)
cat("Full Model -- Number of cases with significantly better FERGM fit:")
table(predict_df$sig)
sink()
gc()
library("ggplot2")
library("dlstats")
x <- cran_stats(c("fergm"))
head(x)
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
knit_with_parameters('~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/vignettes/mesaHighVignette.Rmd')
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/data/ergm.fit.rda")
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/data/fergm.fit.rda")
ergm.fit$network$mel
ergm.fit$network
ergm.fit$network$gal
ergm.fit$network$gal$n
n_dyads <- choose(ergm.fit$network$gal$n, 2)
library(fergm)
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/data/fergm.fit.rda")
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/data/ergm.fit.rda")
its <- rstan::extract(fergm.fit$stan.fit)$beta
fergm.fit$stan.dta
fergm.fit$stan.dta$x
colnames(fergm.fit$stan.dta$x)
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/data/mesa.rda")
mesa
ergm.fit$formula
library(ergm)
ergm1 <- ergm(mesa ~ edges + nodemix("Sex") + nodemix("Grade") +
nodemix("Race") + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE))
fergm1 <- fergm((mesa ~ edges + nodemix("Sex") + nodemix("Grade") +
nodemix("Race") + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE))
fergm1 <- fergm(mesa ~ edges + nodemix("Sex") + nodemix("Grade") +
nodemix("Race") + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE))
fergm1 <- fergm(mesa ~ edges + nodemix("Sex") + nodemix("Grade") +
nodemix("Race") + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE))
fergm1 <- fergm::fergm(mesa ~ edges + nodemix("Sex") + nodemix("Grade") +
nodemix("Race") + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE))
mesa
library(fergm)
coef_plot
fergm1 <- fergm::fergm(mesa ~ edges + nodemix("Sex") + nodemix("Grade") +
nodemix("Race") + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE))
fergm1 <- fergm::fergm(net = mesa, form = c("edges  + nodemix('Sex') + nodemix('Grade') +
nodemix('Race') + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE)"))
?fergm
fergm1 <- fergm::fergm(net = mesa, form = c("edges  + nodemix('Sex') + nodemix('Grade') +
nodemix('Race') + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE)"), chains = 1, warmup = 100, iter = 100)
coef_plot(ergm1, fergm1)
?coef_plot
coef_plot(fergm.fit = fergm1, ergm.fit = ergm1)
ergm1
fergm1
coef_plot(fergm.fit = fergm1)
clean_summary(fergm1)
fergm_beta_traceplot(fergm1)
coef_posterior_density(fergm1)
library(fergm)
coef_plot(fergm.fit = fergm1)
clean_summary(fergm1)
coef_posterior_density(fergm1)
coef_plot(fergm.fit = fergm1, ergm1 = ergm1)
coef_plot(fergm.fit = fergm1, ergm.fit = ergm1)
coef_plot(fergm.fit = fergm1)
fergm1
clean_summary(fergm1)
library(ergm)
ergm1 <- ergm(mesa ~ edges + nodemix("Sex") + nodemix("Grade") +
nodemix("Race") + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE))
fergm1 <- fergm::fergm(net = mesa, form = c("edges  + nodemix('Sex') + nodemix('Grade') +
nodemix('Race') + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE)"), chains = 1, warmup = 100, iter = 300)
coef_plot(fergm.fit = fergm1)
clean_summary(fergm1)
coef_posterior_density(fergm1)
coef_plot(fergm.fit = fergm1)
coef_plot(ergm.fit = ergm1, fergm.fit = fergm1)
?nodemix
sessionInfo()
devtools::build_win(version = "R-release")
devtools::built()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::check()c
devtools::check()
devtools::build_win(version = "R-release")
devtools::build_win(version = "R-devel")
devtools::build_win(version = "R-release")
devtools::build_win(version = "R-devel")
devtools::release()
devtools::release()
install.packages('devtools')
install.packages("devtools")
devtools::release()

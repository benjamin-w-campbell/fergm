ggtitle(var) +
#cale_fill_manual(values=c("firebrick4", "dodgerblue4"),
#name="Model",
# breaks=c("pct_correct_ergm", "pct_correct_fergm"),
#labels=c("ERGM", "FERGM")) +
# scale_color_manual(values=c("firebrick4", "dodgerblue4"),
# name="Model",
# breaks=c("pct_correct_ergm", "pct_correct_fergm"),
# labels=c("ERGM", "FERGM")) +
#  geom_vline(xintercept=0) +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
,list(i=i)))
plot_list[[i]] <- pl
}
return(plot_list)
}
densities <- coef_posterior_density(fergm.fit = fergm.fit, custom_var_names = c("Edges", "Sex Homophily", "Grade Homophily", "Race Homophily", "GWESP", "Alternating K-Stars"))
densities[[1]]
densities[[2]]
#' Plots the posterior density for the fergm model terms
#'
#' This function allows the users to examine the posterior density of FERGM model terms.
#' @param fergm.fit Output object from the fergm function.
#' @param custom_var_names Custom variable names to use that match the order of the form object passed to FERGM.
#' @return This prints a list of posterior density plots.
#' @references Box-Steffensmeier, Janet M., Dino P. Christenson, and Jason W. Morgan. 2017. ``Modeling Unobserved Heterogeneity in Social Networks with the Frailty Exponential Random Graph Model." \emph{Political Analysis}.
#' @references Stan Development Team (2016). RStan: the R interface to Stan. R package version 2.14.1. \url{http://mc-stan.org/}.
#' @keywords FERGM interpret summary
#' @examples
#'\dontrun{
#' # You can also look at the density of particular variables
#'   # using the following built in rstan functions:
#' plot(fergm.fit$stan.fit, par = "beta")
#' # Histogram of the posterior
#' stan_hist(fergm.fit$stan.fit, par = "beta")
#' # Density of the posteriors
#' stan_dens(fergm.fit$stan.fit, par = "beta")
#'
#' # We have a cleaner function to look at the posterior densities
#' densities <- coef_posterior_density(fergm.fit = fergm.fit,
#' custom_var_names = c("Edges", "Sex Homophily", "Grade Homophily", "Race Homophily",
#' "GWESP", "Alternating K-Stars"))
#' densities[[1]]
#' densities[[2]]
#' }
#' @export
coef_posterior_density <- function(fergm.fit = NULL, custom_var_names = NULL){
its <- rstan::extract(fergm.fit$stan.fit)$beta
plot_list <- list()
for(i in 1:ncol(its)){
local({
i <- i
ts <- its[,i]
plot_df <- data.frame(values = ts)
plot_df <- reshape2::melt(plot_df)
var <- custom_var_names[i]
pl <- ggplot(data = plot_df, aes(x = plot_df$value)) +
geom_density(aes(x=plot_df$value, y=..scaled..), alpha = 0.5, fill = "firebrick4", color = "firebrick4") +
xlab("Effect Value") +
ylab("Scaled Density") +
ggtitle(var) +
#cale_fill_manual(values=c("firebrick4", "dodgerblue4"),
#name="Model",
# breaks=c("pct_correct_ergm", "pct_correct_fergm"),
#labels=c("ERGM", "FERGM")) +
# scale_color_manual(values=c("firebrick4", "dodgerblue4"),
# name="Model",
# breaks=c("pct_correct_ergm", "pct_correct_fergm"),
# labels=c("ERGM", "FERGM")) +
#  geom_vline(xintercept=0) +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
plot_list[[i]] <- pl
})
return(plot_list)
}
densities <- coef_posterior_density(fergm.fit = fergm.fit, custom_var_names = c("Edges", "Sex Homophily", "Grade Homophily", "Race Homophily", "GWESP", "Alternating K-Stars"))
}
coef_posterior_density <- function(fergm.fit = NULL, custom_var_names = NULL){
its <- rstan::extract(fergm.fit$stan.fit)$beta
plot_list <- list()
for(i in 1:ncol(its))
local({
i <- i
ts <- its[,i]
plot_df <- data.frame(values = ts)
plot_df <- reshape2::melt(plot_df)
var <- custom_var_names[i]
pl <- ggplot(data = plot_df, aes(x = plot_df$value)) +
geom_density(aes(x=plot_df$value, y=..scaled..), alpha = 0.5, fill = "firebrick4", color = "firebrick4") +
xlab("Effect Value") +
ylab("Scaled Density") +
ggtitle(var) +
#cale_fill_manual(values=c("firebrick4", "dodgerblue4"),
#name="Model",
# breaks=c("pct_correct_ergm", "pct_correct_fergm"),
#labels=c("ERGM", "FERGM")) +
# scale_color_manual(values=c("firebrick4", "dodgerblue4"),
# name="Model",
# breaks=c("pct_correct_ergm", "pct_correct_fergm"),
# labels=c("ERGM", "FERGM")) +
#  geom_vline(xintercept=0) +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
plot_list[[i]] <- pl
})
return(plot_list)
}
densities <- coef_posterior_density(fergm.fit = fergm.fit, custom_var_names = c("Edges", "Sex Homophily", "Grade Homophily", "Race Homophily", "GWESP", "Alternating K-Stars"))
densities[[1]]
densities[[2]]
densities
#' Plots the posterior density for the fergm model terms
#'
#' This function allows the users to examine the posterior density of FERGM model terms.
#' @param fergm.fit Output object from the fergm function.
#' @param custom_var_names Custom variable names to use that match the order of the form object passed to FERGM.
#' @return This prints a list of posterior density plots.
#' @references Box-Steffensmeier, Janet M., Dino P. Christenson, and Jason W. Morgan. 2017. ``Modeling Unobserved Heterogeneity in Social Networks with the Frailty Exponential Random Graph Model." \emph{Political Analysis}.
#' @references Stan Development Team (2016). RStan: the R interface to Stan. R package version 2.14.1. \url{http://mc-stan.org/}.
#' @keywords FERGM interpret summary
#' @examples
#'\dontrun{
#' # You can also look at the density of particular variables
#'   # using the following built in rstan functions:
#' plot(fergm.fit$stan.fit, par = "beta")
#' # Histogram of the posterior
#' stan_hist(fergm.fit$stan.fit, par = "beta")
#' # Density of the posteriors
#' stan_dens(fergm.fit$stan.fit, par = "beta")
#'
#' # We have a cleaner function to look at the posterior densities
#' densities <- coef_posterior_density(fergm.fit = fergm.fit,
#' custom_var_names = c("Edges", "Sex Homophily", "Grade Homophily", "Race Homophily",
#' "GWESP", "Alternating K-Stars"))
#' densities[[1]]
#' densities[[2]]
#' }
#' @export
coef_posterior_density <- function(fergm.fit = NULL, custom_var_names = NULL){
its <- rstan::extract(fergm.fit$stan.fit)$beta
plot_list <- list()
for(i in 1:ncol(its)){
i <- i
ts <- its[,i]
plot_df <- data.frame(values = ts)
plot_df <- reshape2::melt(plot_df)
var <- custom_var_names[i]
pl <- ggplot(data = plot_df, aes(x = plot_df$value)) +
geom_density(aes(x=plot_df$value, y=..scaled..), alpha = 0.5, fill = "firebrick4", color = "firebrick4") +
xlab("Effect Value") +
ylab("Scaled Density") +
ggtitle(var) +
#cale_fill_manual(values=c("firebrick4", "dodgerblue4"),
#name="Model",
# breaks=c("pct_correct_ergm", "pct_correct_fergm"),
#labels=c("ERGM", "FERGM")) +
# scale_color_manual(values=c("firebrick4", "dodgerblue4"),
# name="Model",
# breaks=c("pct_correct_ergm", "pct_correct_fergm"),
# labels=c("ERGM", "FERGM")) +
#  geom_vline(xintercept=0) +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
plot_list[[i]] <- pl
}
return(plot_list)
}
densities <- coef_posterior_density(fergm.fit = fergm.fit, custom_var_names = c("Edges", "Sex Homophily", "Grade Homophily", "Race Homophily", "GWESP", "Alternating K-Stars"))
densities[[1]]
densities[[2]]
its <- rstan::extract(fergm.fit$stan.fit)$beta
coef_posterior_density <- function(fergm.fit = NULL, custom_var_names = NULL){
its <- rstan::extract(fergm.fit$stan.fit)$beta
plot_list <- list()
for(i in 1:ncol(its))
local({
i <- i
ts <- its[,i]
plot_df <- data.frame(values = ts)
plot_df <- reshape2::melt(plot_df)
var <- custom_var_names[i]
pl <- ggplot(data = plot_df, aes(x = plot_df$value)) +
geom_density(aes(x=plot_df$value, y=..scaled..), alpha = 0.5, fill = "firebrick4", color = "firebrick4") +
xlab("Effect Value") +
ylab("Scaled Density") +
ggtitle(var) +
#cale_fill_manual(values=c("firebrick4", "dodgerblue4"),
#name="Model",
# breaks=c("pct_correct_ergm", "pct_correct_fergm"),
#labels=c("ERGM", "FERGM")) +
# scale_color_manual(values=c("firebrick4", "dodgerblue4"),
# name="Model",
# breaks=c("pct_correct_ergm", "pct_correct_fergm"),
# labels=c("ERGM", "FERGM")) +
#  geom_vline(xintercept=0) +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
plot_list[[i]] <<- pl
})
return(plot_list)
}
densities <- coef_posterior_density(fergm.fit = fergm.fit, custom_var_names = c("Edges", "Sex Homophily", "Grade Homophily", "Race Homophily", "GWESP", "Alternating K-Stars"))
densities[[1]]
densities[[2]]
densities[[1]]
densities[[5]]
plot(fergm.fit$stan.fit, par = "beta")
stan_hist(fergm.fit$stan.fit, par = "beta")
stan_dens(fergm.fit$stan.fit, par = "beta")
stan_ac(fergm.fit$stan.fit, par = "beta")
save.image("PackageTest_MesaHigh.RData")
devtools::document()
devtools::build()
devtools::check()
??build_win
devtools::build_win()
devtools::use_travis()
?devtools::install_github()
?devtools::install_github
devtools::install_github(fergm, "benjamin-w-campbell")
devtools::install_github("benjamin-w-campbell/fergm")
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::build_win()
?fergm
library(fergm)
?fergm
devtools::build()
devtools::use_travis()
??win_build
??build_win
devtools::build_win(version = "R-release")
devtools::document()
devtools::build()
devtools::check()
devtools::build_win()
?devtools::build_win
devtools::build_win(version="R-devel")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
build()
devtools::build()
devtools::check()
devtools::build_win()
devtools::build_win(version = "R-release")
devtools::release()
devtools::release()
devtools::release()
devtools::release()
devtools::release()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::check()
devtools:document()
devtools::document()
devtools::release()
devtools::release()
install.pandoc()
??install.pandoc
install.packages('installr')
library(rmarkdown)
devtools::release()
install.packages("devtools")
install.packages("devtools")
devtools::release()
devtools::check()
devtools::release()
devtools::release()
devtools:build_win()
devtools::build_win()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::build_win()
devtools::build_win(version = "R-devel")
?build_win
devtools::build_win(version = "R-release")
devtools::release()
devtools::release()
devtools::build()
devtools::check()
load("~/Dropbox/int group environment cases/FERGM replication/data and code/PackageTest_MesaHigh.RData")
library(fergm)
rm(coef_posterior_density())
fergm::coef_posterior_density(fergm.fit)
compare_predictions_plot(predict_out)
fergm::coef_posterior_density(fergm.fit, custom_var_names = custom_var_names)
devtools::build_win()
devtools::build_win(version="R-release")
devtools::release()
install.packages(c("curl", "git2r", "withr")
)
install.packages(c("curl", "git2r", "withr"))
devtools::release()
devtools::release()
?btergm
??btergm
devtools::document()
devtools::build()
devtools::check()
devtools::build_win()
devtools::build_win(version = "R-release")
library(fergm)
devtools::check()
devtools::release()
library(statnet)
library(coda)
set.seed(1)
data("faux.mesa.high")
mesa <- faux.mesa.high
ergm.fit <- ergm(mesa ~ edges +
nodematch('Sex') +
nodematch('Grade', diff = FALSE) +
nodematch('Race', diff = FALSE) +
gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE))
# FERGM fit
library(fergm)
form <- c("edges + nodematch('Sex') + nodematch('Grade', diff = FALSE) +
nodematch('Race', diff = FALSE) + gwesp(decay = 0.2, fixed = TRUE) +
altkstar(lambda = 0.6, fixed = TRUE)")
fergm.fit <- fergm(net = mesa, form = form, chains = 2)
save(ergm.fit, file = "ergm.fit.RData")
save(fergm.fit, file = "fergm.fit.RData")
save(fergm.fit, file = "fergmfit.RData")
save(ergm.fit, file = "ergmfit.RData")
stan.smry <- summary(fergm.fit$stan.fit)$summary
stan.smry <- summary(fergm.fit$stan.fit)$summary
beta_df <- stan.smry[grep("beta", rownames(stan.smry)),]
est <- round(beta_df[,c(1,4,8)], 3)
est # in order of "form"
est <- clean_summary(fergm.fit, form = form)
est <- clean_summary(fergm.fit, form = form)
est <- clean_summary(fergm.fit,
custom_var_names = c("Edges", "Sex Homophily",
"GradeHomophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
coef_plot(fergm.fit = fergm.fit,
ergm.fit = ergm.fit,
custom_var_names =  c("Edges", "Sex Homophily", "Grade Homophily",
"Race Homophily", "GWESP", "Alternating K-Stars"))
coef_plot(fergm.fit = fergm.fit,
custom_var_names =  c("Edges", "Sex Homophily", "Grade Homophily",
"Race Homophily", "GWESP", "Alternating K-Stars"))
densities <- coef_posterior_density(fergm.fit = fergm.fit,
custom_var_names = c("Edges", "Sex Homophily",
"Grade Homophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
densities[[1]]
densities[[1]]
densities[[2]]
trace <- rstan::traceplot(fergm.fit$stan.fit, pars = "beta")
trace
fergm_beta_traceplot(fergm.fit,
form = NULL,
custom_var_names =  c("Edges", "Sex Homophily",
"Grade Homophily", "Race Homophily",
"GWESP", "Alternating K-Stars"))
predict_out <- compare_predictions(ergm_fit = ergm.fit, fergm_fit = fergm.fit)
?compare_predictions
predict_out <- compare_predictions(ergm_fit = ergm.fit, fergm_fit = fergm.fit, replications = 100)
compare_predictions_plot(predict_out)
compare_predictions_test(predict_out)
devtools::build_vignettes()
devtools::use_data(ergm.fit, fergm.fit, internal=T)
devtools::document()
devtools::build()
?compare_predictions
devtools::document()
devtools::build()
devtools::run_examples()
devtools::build()
devtools::document()
devtools::build()
devtools::run_examples()
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/R/sysdata.rda")
ergm.fit$network
?simulate.ergm
data("mesa")
data("faux.mesa.high")
mesa <- faux.mesa.high
devtools::use_data(ergm.fit, fergm.fit, mesa, internal = TRUE)
devtools::use_data(ergm.fit, fergm.fit, mesa, internal = TRUE, overright=TRUE)
devtools::use_data(ergm.fit, fergm.fit, mesa, internal = TRUE, overwrite=TRUE)
devtools::build()
devtools::run_examples()
devtools::document()
devtools::build()
devtools::run_examples()
devtools::check()
tools::checkRdaFiles()
document::build()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
library(fergm)
ferm.fit
data("fergm.fit")
load("~/Dropbox/int group environment cases/FERGM replication/data and code/fergm/R/sysdata.rda")
setwd("~/Dropbox/Projects/Projects_Skyler/TNAM_TC/TNAM_pilot_data/clusteringPaper")
############################
#
# TC -- Descriptive Statistics
# B. W. Campbell
# Last Updated:  08/07/2017
#
############################
############
# Top Matter
############
setwd("~/Dropbox/Projects/Projects_Skyler/TNAM_TC/TNAM_pilot_data/clusteringPaper")
rm(list = ls())
options(stringsAsFactors = FALSE)
load("GraduationResults.RData")
dat <- Affirmations_8$model
dat[dat$covariate.Days < 0,]$covariate.Days <- NA
rm(list=setdiff(ls(), "dat"))
################
# Densities of
# variables
################
source("describe.R")
outcome <- describe(dat$response, type = "binary", plot_title = "TC Graduation")
net1 <- describe(dat$netlag.pathdist1, type = "continuous", plot_title = "Direct Affirmations")
net2 <- describe(dat$netlag.pathdist2.decay0.5, type = "continuous", plot_title = "Indirect Affirmations")
indegree <- describe(dat$indegree, type = "continuous", plot_title = "In-Degree Centrality")
reciprocity <- describe(dat$`covariate.Reciprocity Rate`, type = "continuous", plot_title = "Reciprocity Rate")
days <- describe(dat$covariate.Days, type = "continuous", plot_title = "Days")
age <- describe(dat$covariate.Age, type = "continuous", plot_title = "Age")
black <- describe(dat$covariate.Black, type = "binary", plot_title = "Black")
lsi <- describe(dat$`covariate.LSI Entry`, type = "continuous", plot_title = "Entry LSI")
# Multiplot
source("multiplot.R")
pdf("DescriptionMultiplot.png")
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, cols=3)
dev.off()
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, cols=3)
# Descriptions
dist <- list(outcome = outcome$dist, direct = net1$dist, indirect = net2$dist,
indegree = indegree$dist, reciprocity = reciprocity$dist, days= days$dist,
age = age$dist, black = black$dist, lsi = lsi$dist)
sink("DescriptionOutput.txt")
dist
sink()
sd(dat$netlag.pathdist1)
sd(dat$netlag.pathdist2.decay0.5)
png("DescriptionMultiplot.png")
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, cols=3)
dev.off()
# Descriptions
dist <- list(outcome = outcome$dist, direct = net1$dist, indirect = net2$dist,
indegree = indegree$dist, reciprocity = reciprocity$dist, days= days$dist,
age = age$dist, black = black$dist, lsi = lsi$dist)
sink("DescriptionOutput.txt")
dist
sink()
?png
png("DescriptionMultiplot.png", width = 700, height = 700)
multiplot(outcome$summary_plot, net1$summary_plot, net2$summary_plot,
indegree$summary_plot, reciprocity$summary_plot, days$summary_plot,
age$summary_plot, black$summary_plot, lsi$summary_plot, cols=3)
dev.off()
mean(dat$netlag.pathdist1)
mean(dat$netlag.pathdist2.decay0.5)
